{"version":3,"sources":["lib/format-date.ts","lib/request-data.ts","components/header.tsx","components/calendar.tsx","components/alert.tsx","components/alerts.tsx","components/modes.tsx","components/priorities.tsx","components/search.tsx","pages/landing.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formatDate","date","format","endpoint","requestData","a","params","url","URL","Object","entries","forEach","key","value","searchParams","set","fetch","href","response","json","JSON","parse","useStyles","makeStyles","theme","createStyles","root","flexGrow","marginBottom","spacing","iconButton","marginRight","title","display","breakpoints","up","Header","classes","className","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","noWrap","Calendar","handleChange","DatePicker","autoOk","orientation","openTo","onChange","colors","veryLow","yellow","low","amber","normal","orange","high","deepOrange","veryHigh","red","text","palette","primary","main","textDecoration","small","width","height","Alert","description","priority","Divider","ListItem","ListItemAvatar","Avatar","style","background","ListItemText","dangerouslySetInnerHTML","__html","secondary","Alerts","alerts","List","map","alert","urlText","content","length","modes","Train","Bus","Coach","Ferry","margin","Modes","currentMode","handleClick","useTheme","matches","useMediaQuery","ButtonGroup","size","mode","Button","onClick","priorities","Low","Normal","High","Priorities","currentPriority","padding","Search","query","TextField","label","fullWidth","event","target","autoFocus","LandingPage","useState","Date","setDate","data","setData","setMode","setQuery","setPriority","useEffect","filterMOTType","filterDateValid","then","regexp","RegExp","infos","current","filter","test","stringify","Container","Grid","container","direction","justify","alignItems","item","sm","md","Paper","createMuiTheme","blue","App","ThemeProvider","utils","DateFnsUtils","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55b9f7e9.chunk.js","sourcesContent":["import { format } from \"date-fns\";\n\n// Format date to query api\nconst formatDate = (date: Date): string => {\n  return format(date, \"dd-MM-yyyy\");\n};\n\nexport default formatDate;\n","const endpoint =\n  \"https://5ily0l2l1l.execute-api.ap-southeast-2.amazonaws.com/tfnsw\";\n\n// Fetch data from lambda function\nconst requestData = async (params = {}) => {\n  const url = new URL(endpoint);\n\n  Object.entries(params).forEach(([key, value]) => {\n    if (value) {\n      url.searchParams.set(key, `${value}`);\n    }\n  });\n\n  const response = await fetch(url.href);\n  const json = await response.json();\n\n  return JSON.parse(json);\n};\n\nexport default requestData;\n","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport TrainIcon from \"@material-ui/icons/Train\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      marginBottom: theme.spacing(2),\n    },\n    iconButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n      display: \"none\",\n      [theme.breakpoints.up(\"sm\")]: {\n        display: \"block\",\n      },\n    },\n  })\n);\n\n// Nice looking header\nconst Header = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.iconButton}\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n          >\n            <TrainIcon />\n          </IconButton>\n          <Typography className={classes.title} variant=\"h6\" noWrap>\n            Transport for NSW\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import { DatePicker } from \"@material-ui/pickers\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\n\ninterface Props {\n  date: Date;\n  handleChange: (date: MaterialUiPickersDate) => void;\n}\n\n// Calendar to select date from api\nconst Calendar = ({ date, handleChange }: Props) => (\n  <DatePicker\n    autoOk\n    orientation=\"portrait\"\n    variant=\"static\"\n    openTo=\"date\"\n    value={date}\n    onChange={handleChange}\n  />\n);\n\nexport default Calendar;\n","// @ts-nocheck\n\nimport React from \"react\";\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Divider from \"@material-ui/core/Divider\";\nimport {\n  yellow,\n  amber,\n  orange,\n  deepOrange,\n  red,\n} from \"@material-ui/core/colors\";\n\ninterface Props {\n  title?: string;\n  description?: string;\n  priority?: string;\n}\n\nconst colors = {\n  veryLow: yellow,\n  low: amber,\n  normal: orange,\n  high: deepOrange,\n  veryHigh: red,\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    text: {\n      \"& a\": {\n        color: theme.palette.primary.main,\n        textDecoration: \"none\",\n      },\n    },\n    small: {\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n  })\n);\n\n// Single item alert\nconst Alert = ({ title = \"\", description = \"\", priority }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      <Divider />\n      <ListItem>\n        <ListItemAvatar>\n          <Avatar\n            className={classes.small}\n            style={{ background: colors[priority][500] }}\n          >\n            {\" \"}\n          </Avatar>\n        </ListItemAvatar>\n\n        <ListItemText\n          className={classes.text}\n          primary={<div dangerouslySetInnerHTML={{ __html: title }} />}\n          secondary={<div dangerouslySetInnerHTML={{ __html: description }} />}\n        />\n      </ListItem>\n    </>\n  );\n};\n\nexport default Alert;\n","import List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Alert from \"./alert\";\n\ninterface Props {\n  alerts: any[];\n}\n\n// List of alerts from api response\nconst Alerts = ({ alerts = [] }: Props) => {\n  return (\n    <List>\n      {alerts.map((alert: any) => (\n        <Alert\n          title={alert.urlText}\n          description={alert.content}\n          priority={alert.priority}\n        />\n      ))}\n\n      {alerts.length === 0 && (\n        <>\n          <Divider />\n          <ListItem>\n            <ListItemText\n              primary=\"No alerts found\"\n              secondary=\"Try switching the date, mode or priority\"\n            />\n          </ListItem>\n        </>\n      )}\n    </List>\n  );\n};\n\nexport default Alerts;\n","import React from \"react\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  useTheme,\n} from \"@material-ui/core/styles\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\ninterface Props {\n  currentMode: number | null;\n  handleClick: (mode: number | null) => void;\n}\n\nconst modes = {\n  Train: 1,\n  \"Light Rail\": 4,\n  Bus: 5,\n  Coach: 7,\n  Ferry: 9,\n  \"School Bus\": 11,\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n    title: {\n      display: \"inline-block\",\n      margin: theme.spacing(2),\n    },\n  })\n);\n\n// Buttons to filter different modes\nconst Modes = ({ currentMode, handleClick }: Props) => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h6\" className={classes.title}>\n        Modes\n      </Typography>\n      <ButtonGroup color=\"primary\" size={matches ? \"medium\" : \"small\"}>\n        {Object.entries(modes).map(([text, mode]) => (\n          <Button\n            key={text}\n            variant={currentMode === mode ? \"contained\" : \"outlined\"}\n            onClick={() => handleClick(currentMode === mode ? null : mode)}\n          >\n            {text}\n          </Button>\n        ))}\n      </ButtonGroup>\n    </div>\n  );\n};\n\nexport default Modes;\n","import React from \"react\";\nimport {\n  createStyles,\n  makeStyles,\n  Theme,\n  useTheme,\n} from \"@material-ui/core/styles\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\n\ninterface Props {\n  currentPriority: string | null;\n  handleClick: (value: string | null) => void;\n}\n\nconst priorities = {\n  \"Very low\": \"veryLow\",\n  Low: \"low\",\n  Normal: \"normal\",\n  High: \"high\",\n  \"Very high\": \"veryHigh\",\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      \"& > *\": {\n        margin: theme.spacing(1),\n      },\n    },\n    title: {\n      display: \"inline-block\",\n      margin: theme.spacing(2),\n    },\n  })\n);\n\n// Buttons to filter different priorities\nconst Priorities = ({ currentPriority, handleClick }: Props) => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const matches = useMediaQuery(theme.breakpoints.up(\"sm\"));\n\n  return (\n    <div className={classes.root}>\n      <Typography variant=\"h6\" className={classes.title}>\n        Priority\n      </Typography>\n      <ButtonGroup color=\"primary\" size={matches ? \"medium\" : \"small\"}>\n        {Object.entries(priorities).map(([text, value]) => (\n          <Button\n            variant={currentPriority === value ? \"contained\" : \"outlined\"}\n            onClick={() =>\n              handleClick(currentPriority === value ? null : value)\n            }\n          >\n            {text}\n          </Button>\n        ))}\n      </ButtonGroup>\n    </div>\n  );\n};\n\nexport default Priorities;\n","import React from \"react\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\ninterface Props {\n  query: string;\n  handleChange: (value: string) => void;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(2),\n    },\n  })\n);\n\n// Search bar to filter out by regex\nconst Search = ({ query, handleChange }: Props) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        label=\"Search\"\n        variant=\"outlined\"\n        fullWidth\n        value={query}\n        onChange={(event) => handleChange(event.target.value)}\n        autoFocus\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import { useEffect, useState } from \"react\";\nimport { Container, Grid, Paper } from \"@material-ui/core\";\nimport { MaterialUiPickersDate } from \"@material-ui/pickers/typings/date\";\nimport formatDate from \"../lib/format-date\";\nimport requestData from \"../lib/request-data\";\nimport Header from \"../components/header\";\nimport Calendar from \"../components/calendar\";\nimport Alerts from \"../components/alerts\";\nimport Modes from \"../components/modes\";\nimport Priorities from \"../components/priorities\";\nimport Search from \"../components/search\";\n\nconst LandingPage = () => {\n  const [date, setDate] = useState(new Date());\n  const [data, setData] = useState<any>();\n  const [mode, setMode] = useState<number | null>(null);\n  const [query, setQuery] = useState(\"\");\n  const [priority, setPriority] = useState<string | null>(null);\n\n  // Request data when date or mode change\n  useEffect(() => {\n    requestData({\n      filterMOTType: mode,\n      filterDateValid: formatDate(date),\n    }).then(setData);\n  }, [date, mode]);\n\n  // Create regex to filter out alerts\n  const regexp = new RegExp(query, \"i\");\n\n  // Get alerts from response data and filter via query and priority\n  const alerts = (data?.infos?.current ?? []).filter((alert: any) => {\n    return (\n      regexp.test(JSON.stringify(alert)) &&\n      (!priority || alert.priority === priority)\n    );\n  });\n\n  // Callback when date is selected on calendar\n  const handleCalendarChange = (date: MaterialUiPickersDate) => {\n    if (date) {\n      setDate(date);\n      setData(null);\n    }\n  };\n\n  return (\n    <div>\n      <Header />\n      <Container>\n        <Grid\n          container\n          spacing={2}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"stretch\"\n        >\n          <Grid item sm={12} md={4}>\n            <Paper>\n              <Calendar date={date} handleChange={handleCalendarChange} />\n            </Paper>\n          </Grid>\n          <Grid item sm={12} md={8}>\n            <Paper>\n              <Search query={query} handleChange={setQuery} />\n              <Modes currentMode={mode} handleClick={setMode} />\n              <Priorities\n                currentPriority={priority}\n                handleClick={setPriority}\n              />\n              <Alerts alerts={alerts} />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n};\nexport default LandingPage;\n","import React from \"react\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport blue from \"@material-ui/core/colors/blue\";\nimport { MuiPickersUtilsProvider } from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport LandingPage from \"./pages/landing\";\nimport \"@fontsource/roboto\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <CssBaseline />\n      <LandingPage />\n    </MuiPickersUtilsProvider>\n  </ThemeProvider>\n);\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}